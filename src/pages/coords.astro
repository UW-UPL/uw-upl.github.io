---
import { Image } from "astro:assets";
import Base from "../layouts/Base.astro";
import { getCollection } from "astro:content";

const coordinators = await getCollection("coordinators");
---

<Base title="Coords">
  <h2>Coordinators</h2>
  <p>
    These are the people responsible for the daily operation and maintenance of
    the UPL. To reach out, email us at <a href="mailto:upl@cs.wisc.edu"
      >upl@cs.wisc.edu</a
    > with any questions or feedback.
  </p>
  <div class="coords-list">
    {
      coordinators
        .sort((a, b) => a.data.name.localeCompare(b.data.name))
        .filter((coord) => coord.data.isActive)
        .map((coord: any) => (
          <div class="coord-profile">
            <Image
              height="600"
              width="600"
              class="coord-image"
              src={coord.data.image}
              alt={coord.data.name}
            />
            <p>{coord.data.name}</p>
            <p class="coord-detail">
              {Array.isArray(coord.data.study)
                ? coord.data.study.join(", ")
                : coord.data.study}
            </p>
            <p class="coord-detail">
              Favorite emoji:
              {(() => {
                const emoji = coord.data.emoji;

                // custom emoji
                const isImageFile =
                  // has a . and something after it (.svg, .png ...)
                  emoji.includes(".") && emoji.split(".").pop()?.length > 0;

                if (isImageFile) {
                  return (
                    <img
                      src={`/img/emoji/${emoji}`}
                      alt="custom emoji"
                      height="20"
                      style="vertical-align: middle;"
                    />
                  );
                }

                const toCodePoint = (unicode: string) =>
                  Array.from(unicode)
                    .map((char) => char.codePointAt(0)!.toString(16))
                    .join("-");

                const codepoint = toCodePoint(emoji);
                // hit the jsdelivr api for the twemoji
                const emojiUrl = `https://cdn.jsdelivr.net/gh/twitter/twemoji@latest/assets/svg/${codepoint}.svg`;

                return (
                  <img
                    src={emojiUrl}
                    alt={emoji}
                    height="20"
                    style="vertical-align: middle;"
                  />
                );
              })()}
            </p>
            {coord.data.personalLink && (
              // clean up the link
              <a style="display: block;" href={coord.data.personalLink}>
                {(() => {
                  let url = coord.data.personalLink.trim();

                  if (!/^https?:\/\//i.test(url)) {
                    url = "https://" + url;
                  }

                  try {
                    const { hostname } = new URL(url);
                    return hostname.replace(/^www\./i, "").toLowerCase();
                  } catch {
                    return coord.data.personalLink;
                  }
                })()}
              </a>
            )}
            {coord.data.github && (
              <a href={`https://github.com/${coord.data.github}`}>GitHub</a>
            )}
          </div>
        ))
    }
  </div>
</Base>
